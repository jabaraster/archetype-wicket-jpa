<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>${groupId}</groupId>
    <artifactId>${artifactId}</artifactId>
    <packaging>war</packaging>
    <version>${version}</version>
    <name>${artifactId} Webapp</name>
    <url>http://maven.apache.org</url>

    <!-- 実行環境が開発環境orHerokuであると想定して設定を記述しています. -->
    <!-- このため、J2EEコンテナで動作させる場合は調整が必要です. -->

    <properties>
        <jetty.version>8.1.5.v20120716</jetty.version>
        <wicket.version>6.17.0</wicket.version>
        <jersey.version>1.18.1</jersey.version>
        <hibernate.version>4.3.6.Final</hibernate.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <!-- 依存ライブラリを記述 -->
    <dependencies>
        <!-- Servlet API -->
        <dependency>
            <groupId>org.eclipse.jetty.orbit</groupId>
            <artifactId>javax.servlet</artifactId>
            <version>3.0.0.v201112011016</version>
            <!-- J2EEコンテナ上で動作させる場合はscopeをprovidedにする
            <scope>provided</scope>
            -->
        </dependency>

        <!-- JerseyとGuiceの統合 -->
        <dependency>
            <groupId>com.sun.jersey.contribs</groupId>
            <artifactId>jersey-guice</artifactId>
            <version>${jersey.version}</version>
        </dependency>

        <!-- 組み込みJettyの実行に必要 -->
        <dependency>
            <groupId>jabaraster</groupId>
            <artifactId>jabara-jetty</artifactId>
            <version>1.1.1</version>
        </dependency>

        <!-- GzipFilterのために必要 -->
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-servlets</artifactId>
            <version>${jetty.version}</version>
        </dependency>

        <!-- Jettyでセッションレプリケーションを実現するためのライブラリ. Memcachedを利用したHttpSession実装を提供 -->
        <dependency>
            <groupId>jabaraster</groupId>
            <artifactId>jabara-jetty-memcached</artifactId>
            <version>1.1</version>
        </dependency>

        <!-- Wicket -->
        <dependency>
            <groupId>org.apache.wicket</groupId>
            <artifactId>wicket-core</artifactId>
            <version>${wicket.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.wicket</groupId>
            <artifactId>wicket-extensions</artifactId>
            <version>${wicket.version}</version>
        </dependency>

        <!-- Wicketのログインページによる認証処理など -->
        <dependency>
            <groupId>jabaraster</groupId>
            <artifactId>jabara-wicket</artifactId>
            <version>2.8.1</version>
        </dependency>

        <!-- WicketとDIコンテナであるGoogle Guiceを連携させるために必要. 依存JARがガツンと増えるのが難点 -->
        <dependency>
            <groupId>org.apache.wicket</groupId>
            <artifactId>wicket-guice</artifactId>
            <version>${wicket.version}</version>
        </dependency>

        <!-- JAX-RS API -->
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>jsr311-api</artifactId>
            <version>1.1.1</version>
            <!-- J2EEコンテナ上で動作させる場合はscopeをprovidedにする
            <scope>provided</scope>
            -->
        </dependency>

        <!-- Jersey(JAX-RS実装)のコア -->
        <dependency>
            <groupId>com.sun.jersey</groupId>
            <artifactId>jersey-server</artifactId>
            <version>${jersey.version}</version>
            <scope>runtime</scope> <!-- アプリケーションコードから参照してほしくないライブラリはruntimeスコープが適当 -->
        </dependency>
        <!-- Jerseyでファイルアップロードを扱うために必要 -->
        <!-- このライブラリを使う場合はJersey依存になることに注意が必要だが、かなり便利なので重宝する. -->
        <dependency>
            <groupId>com.sun.jersey.contribs</groupId>
            <artifactId>jersey-multipart</artifactId>
            <version>${jersey.version}</version>
        </dependency>

        <!-- JAX-RSでJSONを上手に扱うためのライブラリ. 河野作成 -->
        <dependency>
            <groupId>jabaraster</groupId>
            <artifactId>jabara-jax-rs</artifactId>
            <version>2.0.1</version>
        </dependency>

        <!-- JPA API -->
        <dependency>
            <groupId>org.hibernate.javax.persistence</groupId>
            <artifactId>hibernate-jpa-2.1-api</artifactId>
            <version>1.0.0.Final</version>
            <!-- J2EEコンテナ上で動作させる場合はscopeをprovidedにする
            <scope>provided</scope>
            -->
        </dependency>

        <!-- JPA実装 -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-entitymanager</artifactId>
            <version>${hibernate.version}</version>
            <scope>runtime</scope>
        </dependency>
        <!-- コネクションプーリング. -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-c3p0</artifactId>
            <version>${hibernate.version}</version>
            <scope>runtime</scope>
        </dependency>

        <!-- JDBCドライバ -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>9.3-1102-jdbc41</version>
            <scope>runtime</scope>
        </dependency>

        <!-- JPA用ユーティリティ -->
        <dependency>
            <groupId>jabaraster</groupId>
            <artifactId>jabara-jpa</artifactId>
            <version>1.7.0</version>
        </dependency>
        <dependency>
            <groupId>jabaraster</groupId>
            <artifactId>jabara-jpa-guice</artifactId>
            <version>2.1.0</version>
        </dependency>

        <!-- Beanの検証(JSR303) -->
        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <version>1.0.0.GA</version>
            <!-- J2EEコンテナ上で動作させる場合はscopeをprovidedにする
            <scope>provided</scope>
            -->
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>4.3.2.Final</version>
            <scope>runtime</scope>
        </dependency>

        <!-- 以下のライブラリがあった方がログが見やすい. -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>1.6.2</version>
            <scope>runtime</scope>
        </dependency>

        <!-- Servletに関連するプリミティブライブラリ. リクエストダンプに使う. 河野作成. -->
        <dependency>
            <groupId>jabaraster</groupId>
            <artifactId>jabara-servlet</artifactId>
            <version>1.3.1</version>
        </dependency>

        <!-- ユーティリティ. 河野作成. -->
        <dependency>
            <groupId>jabaraster</groupId>
            <artifactId>jabara-general</artifactId>
            <version>1.7.2</version>
        </dependency>

        <!-- getter/setterなどの定型的なメソッドをアノテーション指定出来るようにする.
             eclipseでこの機能を利用するにはeclipseにlombokをインストールする必要がある.
             インストール方法は下記URLを参照のこと.
             http://www.casleyconsulting.co.jp/blog-engineer/java/【java】lombokで冗長コードを削減しよう/
         -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.12.2</version>
            <scope>provided</scope>
        </dependency>

        <!-- テスト用 -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.10</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>1.4.181</version>
            <!-- 本番環境では必要ないが開発中は必要、という要件に適したスコープがない... -->
        </dependency>

    </dependencies>

    <build>
        <finalName>${artifactId}</finalName>

        <!-- JettyにServlet3.0のアノテーションを読み込んでもらうためにclassファイルの出力先ディレクトリを変更する -->
        <outputDirectory>src/main/webapp/WEB-INF/classes</outputDirectory>
        <testOutputDirectory>src/main/webapp/WEB-INF/test-classes</testOutputDirectory>

        <resources>
            <resource>
                <directory>src/main/resources</directory>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**</include>
                </includes>
                <excludes>
                    <exclude>**/*.java</exclude>
                </excludes>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
            </testResource>
            <testResource>
                <directory>src/test/java</directory>
                <includes>
                    <include>**</include>
                </includes>
                <excludes>
                    <exclude>**/*.java</exclude>
                </excludes>
            </testResource>
        </testResources>

        <plugins>

            <!-- UTF-8のソースを正しくコンパイルしてもらうための設定 -->
            <plugin>
                <inherited>true</inherited>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>1.7</source>
                    <target>1.7</target>
                    <optimize>true</optimize>
                    <debug>true</debug>
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
            </plugin>

            <!-- このプロジェクトが依存するJARのソースとJavadocをダウンロードしてくるように設定 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>2.8</version>
                <configuration>
                    <downloadSources>true</downloadSources>
                    <downloadJavadocs>true</downloadJavadocs>
                    <useProjectReferences>false</useProjectReferences> <!-- この設定がないと、河野環境で困ったことになってしまう. -->
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.2.1</version>
                <configuration>
                    <mainClass>${package}.web.container.WebStarter</mainClass>
                    <systemProperties>
                        <systemProperty>
                            <key>${artifactId}_hibernateHbm2ddlAuto</key>
                            <value>update</value> 
                        </systemProperty>
                    </systemProperties>
                </configuration>
            </plugin>

            <!-- このプロジェクトが依存するJARをクラスパスにコピーする設定 -->
            <!-- これがないとHerokuでのWebアプリ起動に失敗する -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>2.4</version>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <stripVersion>true</stripVersion>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- WAR作成時にweb.xmlがなくてもOKにする -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>

        </plugins>
    </build>
    <repositories>
        <!-- 河野作成ライブラリのリポジトリ -->
        <repository>
            <id>jabaraster's repository</id>
            <url>http://jabaraster.github.io/maven/</url>
        </repository>
    </repositories>
</project>
